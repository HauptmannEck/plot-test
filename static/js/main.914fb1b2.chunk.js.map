{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Highcarts3D","Highcharts","pieChart","values","labels","budgetSummary","expenses","filter","expense","type","forEach","push","totals","find","item","year","amount","name","pieChartHigh","data","y","credits","enabled","chart","options3d","alpha","beta","title","text","tooltip","pointFormat","plotOptions","pie","cursor","depth","dataLabels","connectorShape","alignTo","crookDistance","format","label","events","click","e","alert","concat","point","series","directCompareHigh","dataBudget","dataActual","xAxis","directCompare","x","yBudget","yActual","App","react_default","a","createElement","react_plotly_default","layout","width","height","barmode","className","highcharts_react_min_default","highcharts","options","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.914fb1b2.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Plot from 'react-plotly.js';\nimport budgetSummary from './budgetSummary';\nimport Highcharts from 'highcharts'\nimport HighchartsReact from 'highcharts-react-official'\nimport Highcarts3D from 'highcharts/highcharts-3d';\n\nHighcarts3D( Highcharts );\n\nconst pieChart = () => {\n    const values = [];\n    const labels = [];\n    const directExpenses = budgetSummary.expenses.filter( ( expense ) => expense.type === 'DIRECT' );\n\n    directExpenses.forEach( ( expense ) => {\n        values.push( expense.totals.find( ( item ) => item.year === 2017 && item.type === 'BUDGET' ).amount );\n        labels.push( expense.name );\n    } );\n\n    return {\n        values,\n        labels,\n        type: 'pie'\n    };\n};\n\nconst pieChartHigh = () => {\n    const data = [];\n    const directExpenses = budgetSummary.expenses.filter( ( expense ) => expense.type === 'DIRECT' );\n\n    directExpenses.forEach( ( expense ) => {\n        data.push( {\n            y: expense.totals.find( ( item ) => item.year === 2017 && item.type === 'BUDGET' ).amount,\n            name: expense.name,\n        } )\n    } );\n\n    return {\n        credits: {\n            enabled: false,\n        },\n        chart: {\n            type: 'pie',\n            options3d: {\n                enabled: true,\n                alpha: 45,\n                beta: 0\n            }\n        },\n        title: {\n            text: 'Direct Expenses'\n        },\n        tooltip: {\n            pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'\n        },\n        plotOptions: {\n            pie: {\n                cursor: 'pointer',\n                depth: 35,\n                dataLabels: {\n                    enabled: true,\n                    connectorShape: 'crookedLine',\n                    alignTo: 'plotEdges',\n                    crookDistance: '80%',\n                    format: '<b>{point.name}</b><br/><span style=\"color: grey\">{point.percentage:.1f}%</span>'\n                },\n                label: {\n                    enabled: true,\n                },\n                events: {\n                    click: function ( e ) {\n                        alert( `CLICKED ${e.point.name}` )\n                    }\n                }\n            }\n        },\n        series: [ {\n            type: 'pie',\n            data: data\n        } ]\n    };\n};\nconst directCompareHigh = () => {\n    const dataBudget = [];\n    const dataActual = [];\n    const directExpenses = budgetSummary.expenses.filter( ( expense ) => expense.type === 'DIRECT' );\n\n    directExpenses.forEach( ( expense ) => {\n        dataBudget.push( {\n            name: expense.name,\n            y: expense.totals.find( ( item ) => item.year === 2017 && item.type === 'BUDGET' ).amount,\n        } );\n        dataActual.push( {\n            name: expense.name,\n            y: expense.totals.find( ( item ) => item.year === 2017 && item.type === 'ACTUAL' ).amount,\n        } );\n    } );\n\n    return {\n        credits: {\n            enabled: false,\n        },\n        chart: {\n            type: 'column',\n            options3d: {\n                enabled: true,\n                alpha: 0,\n                beta: 45\n            }\n        },\n        title: {\n            text: 'Budget vs Actual 2017'\n        },\n        xAxis: {\n            type: 'category'\n        },\n        plotOptions: {},\n        series: [ {\n            name: 'Budget',\n            data: dataBudget\n        }, {\n            name: 'Actual',\n            data: dataActual\n        } ]\n    };\n};\nconst directCompare = () => {\n    const x = [];\n    const yBudget = [];\n    const yActual = [];\n    const directExpenses = budgetSummary.expenses.filter( ( expense ) => expense.type === 'DIRECT' );\n\n    directExpenses.forEach( ( expense ) => {\n        x.push( expense.name );\n        yBudget.push( expense.totals.find( ( item ) => item.year === 2017 && item.type === 'BUDGET' ).amount );\n        yActual.push( expense.totals.find( ( item ) => item.year === 2017 && item.type === 'ACTUAL' ).amount );\n    } );\n\n    return [ {\n        x,\n        y: yBudget,\n        type: 'bar',\n        name: 'Budget'\n    }, {\n        x,\n        y: yActual,\n        type: 'bar',\n        name: 'Actual'\n    } ];\n};\n\nclass App extends Component {\n    render() {\n        return (\n            <div>\n                <Plot\n                    data={[ pieChart() ]}\n                    layout={{\n                        width: 600,\n                        height: 500,\n                        title: 'Direct Expenses'\n                    }}\n                />\n                <Plot\n                    data={directCompare()}\n                    layout={{\n                        width: 600,\n                        height: 500,\n                        barmode: 'group',\n                        title: 'Budget vs Actual 2017'\n                    }}\n                />\n                <div className=\"row\">\n                    <div className=\"col-4\">\n                        <HighchartsReact\n                            highcharts={Highcharts}\n                            options={pieChartHigh()}\n                        />\n                    </div>\n                    <div className=\"col-4\">\n                        <HighchartsReact\n                            highcharts={Highcharts}\n                            options={directCompareHigh()}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}