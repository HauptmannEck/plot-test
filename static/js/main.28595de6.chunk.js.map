{"version":3,"sources":["PlotlyCharts/index.jsx","HighCharts/index.jsx","C3Charts/index.jsx","App.js","serviceWorker.js","index.js"],"names":["pieChart","values","labels","budgetSummary","expenses","filter","expense","type","forEach","push","totals","find","item","year","amount","name","directCompare","x","yBudget","yActual","y","PlotlyCharts","react_default","a","createElement","className","react_plotly_default","data","layout","width","height","title","barmode","Highcarts3D","Highcharts","HighcartsExporting","HighcartsExportingOffline","HighcartsDrilldown","pieChartHigh","drilldown","expenseGroup","section","id","credits","enabled","export","chart","options3d","alpha","beta","text","tooltip","pointFormat","plotOptions","pie","cursor","depth","dataLabels","connectorShape","alignTo","crookDistance","format","label","series","map","group","reduce","acc","drillUpButton","relativeTo","directCompareHigh","dataBudget","dataActual","xAxis","HighCharts","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","grabChart","bind","assertThisInitialized","printChart","inherits","createClass","key","value","exportChartLocal","onClick","highcharts_react_min_default","highcharts","options","callback","React","Component","pieChartC3","columns","C3Charts","react_c3js_default","ratio","App","PlotlyCharts_PlotlyCharts","HighCharts_HighCharts","C3Charts_C3Charts","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"01HAIMA,EAAW,WACb,IAAMC,EAAS,GACTC,EAAS,GAQf,OAPuBC,EAAcC,SAASC,OAAQ,SAAEC,GAAF,MAAgC,WAAjBA,EAAQC,OAE9DC,QAAS,SAAEF,GACtBL,EAAOQ,KAAMH,EAAQI,OAAOC,KAAM,SAAEC,GAAF,OAA0B,OAAdA,EAAKC,MAA+B,WAAdD,EAAKL,OAAoBO,QAC7FZ,EAAOO,KAAMH,EAAQS,QAGlB,CACHd,SACAC,SACAK,KAAM,QAGRS,EAAgB,WAClB,IAAMC,EAAI,GACJC,EAAU,GACVC,EAAU,GAShB,OARuBhB,EAAcC,SAASC,OAAQ,SAAEC,GAAF,MAAgC,WAAjBA,EAAQC,OAE9DC,QAAS,SAAEF,GACtBW,EAAER,KAAMH,EAAQS,MAChBG,EAAQT,KAAMH,EAAQI,OAAOC,KAAM,SAAEC,GAAF,OAA0B,OAAdA,EAAKC,MAA+B,WAAdD,EAAKL,OAAoBO,QAC9FK,EAAQV,KAAMH,EAAQI,OAAOC,KAAM,SAAEC,GAAF,OAA0B,OAAdA,EAAKC,MAA+B,WAAdD,EAAKL,OAAoBO,UAG3F,CAAE,CACLG,IACAG,EAAGF,EACHX,KAAM,MACNQ,KAAM,UACP,CACCE,IACAG,EAAGD,EACHZ,KAAM,MACNQ,KAAM,YAIDM,EAAe,kBACxBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,4bAUJF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CACII,KAAM,CAAE3B,KACR4B,OAAQ,CACJC,MAAO,IACPC,OAAQ,IACRC,MAAO,sBAInBT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CACII,KAAMX,IACNY,OAAQ,CACJC,MAAO,IACPC,OAAQ,IACRE,QAAS,QACTD,MAAO,0ICnE3BE,IAAaC,KACbC,IAAoBD,KACpBE,IAA2BF,KAC3BG,IAAmBH,KAEnB,IAAMI,EAAe,WACjB,IAAMC,EAAY,GA0BlB,OAxBApC,EAAcC,SAASI,QAAS,SAAEF,GAC9B,IAAMkC,EAAeD,EAAU5B,KAAM,SAAE8B,GAAF,OAAeA,EAAQC,KAAOpC,EAAQC,OAErEK,EAAO,CACTQ,EAAGd,EAAQI,OAAOC,KAAM,SAAEC,GAAF,OAA0B,OAAdA,EAAKC,MAA+B,WAAdD,EAAKL,OAAoBO,OACnFC,KAAMT,EAAQS,MAGbyB,EACDA,EAAab,KAAKlB,KAAMG,GAExB2B,EAAU9B,KAAM,CACZiC,GAAIpC,EAAQC,KACZoB,KAAM,CAAEf,OAWb,CACH+B,QAAS,CACLC,SAAS,GAEbC,OAAQ,GACRC,MAAO,CACHvC,KAAM,MACNwC,UAAW,CACPH,SAAS,EACTI,MAAO,GACPC,KAAM,IAGdlB,MAAO,CACHmB,KAAM,mBAEVC,QAAS,CACLC,YAAa,oBAEjBC,YAAa,CACTC,IAAK,CACDC,OAAQ,UACRC,MAAO,GACPC,WAAY,CACRb,SAAS,EACTc,eAAgB,cAChBC,QAAS,YACTC,cAAe,MACfC,OAAQ,oFAEZC,MAAO,CACHlB,SAAS,KAIrBmB,OAAQ,CAAE,CACNxD,KAAM,MACNQ,KAAM,WACNY,KA5COY,EAAUyB,IAAK,SAAEC,GAAF,MAAe,CACzC7C,EAAG6C,EAAMtC,KAAKuC,OAAQ,SAAEC,EAAK7D,GAAP,OAAoB6D,EAAM7D,EAAQc,GAAG,GAC3DL,KAAMkD,EAAMvB,GACZH,UAAW0B,EAAMvB,QA2CjBH,UAAW,CACPwB,OAAQxB,EACR6B,cAAe,CACXC,WAAY,iBAKtBC,EAAoB,WACtB,IAAMC,EAAa,GACbC,EAAa,GAcnB,OAbuBrE,EAAcC,SAASC,OAAQ,SAAEC,GAAF,MAAgC,WAAjBA,EAAQC,OAE9DC,QAAS,SAAEF,GACtBiE,EAAW9D,KAAM,CACbM,KAAMT,EAAQS,KACdK,EAAGd,EAAQI,OAAOC,KAAM,SAAEC,GAAF,OAA0B,OAAdA,EAAKC,MAA+B,WAAdD,EAAKL,OAAoBO,SAEvF0D,EAAW/D,KAAM,CACbM,KAAMT,EAAQS,KACdK,EAAGd,EAAQI,OAAOC,KAAM,SAAEC,GAAF,OAA0B,OAAdA,EAAKC,MAA+B,WAAdD,EAAKL,OAAoBO,WAIpF,CACH6B,QAAS,CACLC,SAAS,GAEbE,MAAO,CACHvC,KAAM,SACNwC,UAAW,CACPH,SAAS,EACTI,MAAO,EACPC,KAAM,IAGdlB,MAAO,CACHmB,KAAM,yBAEVuB,MAAO,CACHlE,KAAM,YAEV8C,YAAa,GACbU,OAAQ,CAAE,CACNhD,KAAM,SACNY,KAAM4C,GACP,CACCxD,KAAM,SACNY,KAAM6C,MAKLE,EAAb,SAAAC,GAGI,SAAAD,EAAaE,GAAQ,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,IACjBG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAJ,GAAAS,KAAAH,KAAOJ,KAEFQ,UAAYP,EAAKO,UAAUC,KAAfP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KACjBA,EAAKU,WAAaV,EAAKU,WAAWF,KAAhBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAJDA,EAHzB,OAAAC,OAAAU,EAAA,EAAAV,CAAAJ,EAAAC,GAAAG,OAAAW,EAAA,EAAAX,CAAAJ,EAAA,EAAAgB,IAAA,YAAAC,MAAA,SAWe7C,GACPkC,KAAKlC,MAAQA,IAZrB,CAAA4C,IAAA,aAAAC,MAAA,WAgBQX,KAAKlC,MAAM8C,qBAhBnB,CAAAF,IAAA,SAAAC,MAAA,WAoBQ,OACIrE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,0aAWAF,EAAAC,EAAAC,cAAA,UAAQqE,QAASb,KAAKO,YAAtB,UAEJjE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAACsE,EAAAvE,EAAD,CACIwE,WAAY7D,IACZ8D,QAAS1D,IACT2D,SAAUjB,KAAKI,aAGvB9D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAACsE,EAAAvE,EAAD,CACIwE,WAAY7D,IACZ8D,QAAS1B,YA/CjCI,EAAA,CAAgCwB,IAAMC,4BCjIhCC,SAAa,WACf,IAAMzE,EAAO,GAUb,OATuBxB,EAAcC,SAASC,OAAQ,SAAEC,GAAF,MAAgC,WAAjBA,EAAQC,OAE9DC,QAAS,SAAEF,GACtBqB,EAAKlB,KAAM,CACPH,EAAQS,KACRT,EAAQI,OAAOC,KAAM,SAAEC,GAAF,OAA0B,OAAdA,EAAKC,MAA+B,WAAdD,EAAKL,OAAoBO,WAIjF,CACHuF,QAAS1E,EACTpB,KAAM,SAID+F,EAAW,kBACpBhF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,gBACAF,EAAAC,EAAAC,cAAA,0NAOJF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAC+E,EAAAhF,EAAD,CACII,KAAMyE,IACN9C,IAAK,CACDQ,MAAO,CACHD,OAAQ,SAAW8B,EAAOa,EAAO9D,GAC7B,OAAOiD,UCpBpBc,mLAVP,OACInF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAACkF,EAAD,MACApF,EAAAC,EAAAC,cAACmF,EAAD,MACArF,EAAAC,EAAAC,cAACoF,EAAD,cANET,aCKEU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7F,EAAAC,EAAAC,cAAC4F,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.28595de6.chunk.js","sourcesContent":["import React from 'react';\nimport Plot from 'react-plotly.js';\nimport budgetSummary from \"../budgetSummary\";\n\nconst pieChart = () => {\n    const values = [];\n    const labels = [];\n    const directExpenses = budgetSummary.expenses.filter( ( expense ) => expense.type === 'DIRECT' );\n\n    directExpenses.forEach( ( expense ) => {\n        values.push( expense.totals.find( ( item ) => item.year === 2017 && item.type === 'BUDGET' ).amount );\n        labels.push( expense.name );\n    } );\n\n    return {\n        values,\n        labels,\n        type: 'pie'\n    };\n};\nconst directCompare = () => {\n    const x = [];\n    const yBudget = [];\n    const yActual = [];\n    const directExpenses = budgetSummary.expenses.filter( ( expense ) => expense.type === 'DIRECT' );\n\n    directExpenses.forEach( ( expense ) => {\n        x.push( expense.name );\n        yBudget.push( expense.totals.find( ( item ) => item.year === 2017 && item.type === 'BUDGET' ).amount );\n        yActual.push( expense.totals.find( ( item ) => item.year === 2017 && item.type === 'ACTUAL' ).amount );\n    } );\n\n    return [ {\n        x,\n        y: yBudget,\n        type: 'bar',\n        name: 'Budget'\n    }, {\n        x,\n        y: yActual,\n        type: 'bar',\n        name: 'Actual'\n    } ];\n};\n\nexport const PlotlyCharts = () => (\n    <div className=\"row\">\n        <div className=\"col-12\">\n            <h2>Plotly</h2>\n            <p>\n                A free wrapper of D3 with some access to the underlying d3 code.\n                Not able to do some styles choices such as 3d Pie Charts, but starts with many useful features.\n                Easy to work with api, but limited examples and documentation.\n                Stock and Map style charts are included.\n                Python options are available so one report config can work in multiple systems.\n                Allows Exporting to PNG and cloud editor.\n                Has a cloud editor for non-technical users.\n            </p>\n        </div>\n        <div className=\"col-4\">\n            <Plot\n                data={[ pieChart() ]}\n                layout={{\n                    width: 600,\n                    height: 500,\n                    title: 'Direct Expenses'\n                }}\n            />\n        </div>\n        <div className=\"col-4\">\n            <Plot\n                data={directCompare()}\n                layout={{\n                    width: 600,\n                    height: 500,\n                    barmode: 'group',\n                    title: 'Budget vs Actual 2017'\n                }}\n            />\n        </div>\n    </div>\n);\n","import React from 'react';\nimport Highcharts from 'highcharts'\nimport HighchartsReact from 'highcharts-react-official'\nimport Highcarts3D from 'highcharts/highcharts-3d';\nimport HighcartsExporting from 'highcharts/modules/exporting';\nimport HighcartsExportingOffline from 'highcharts/modules/offline-exporting';\nimport HighcartsDrilldown from 'highcharts/modules/drilldown';\nimport budgetSummary from \"../budgetSummary\";\n\nHighcarts3D( Highcharts );\nHighcartsExporting( Highcharts );\nHighcartsExportingOffline( Highcharts );\nHighcartsDrilldown(Highcharts);\n\nconst pieChartHigh = () => {\n    const drilldown = [];\n\n    budgetSummary.expenses.forEach( ( expense ) => {\n        const expenseGroup = drilldown.find( ( section ) => section.id === expense.type );\n\n        const item = {\n            y: expense.totals.find( ( item ) => item.year === 2017 && item.type === 'BUDGET' ).amount,\n            name: expense.name,\n        };\n\n        if ( expenseGroup ) {\n            expenseGroup.data.push( item );\n        } else {\n            drilldown.push( {\n                id: expense.type,\n                data: [ item ],\n            } );\n        }\n    } );\n\n    const totals = drilldown.map( ( group ) => ( {\n        y: group.data.reduce( ( acc, expense ) => acc + expense.y, 0 ),\n        name: group.id,\n        drilldown: group.id,\n    } ) );\n\n    return {\n        credits: {\n            enabled: false,\n        },\n        export: {},\n        chart: {\n            type: 'pie',\n            options3d: {\n                enabled: true,\n                alpha: 45,\n                beta: 0\n            }\n        },\n        title: {\n            text: 'Direct Expenses'\n        },\n        tooltip: {\n            pointFormat: '<b>{point.y}</b>'\n        },\n        plotOptions: {\n            pie: {\n                cursor: 'pointer',\n                depth: 35,\n                dataLabels: {\n                    enabled: true,\n                    connectorShape: 'crookedLine',\n                    alignTo: 'plotEdges',\n                    crookDistance: '80%',\n                    format: '<b>{point.name}</b><br/><span style=\"color: grey\">{point.percentage:.1f}%</span>'\n                },\n                label: {\n                    enabled: true,\n                },\n            }\n        },\n        series: [ {\n            type: 'pie',\n            name: 'Expenses',\n            data: totals\n        } ],\n        drilldown: {\n            series: drilldown,\n            drillUpButton: {\n                relativeTo: 'spacingBox'\n            }\n        }\n    };\n};\nconst directCompareHigh = () => {\n    const dataBudget = [];\n    const dataActual = [];\n    const directExpenses = budgetSummary.expenses.filter( ( expense ) => expense.type === 'DIRECT' );\n\n    directExpenses.forEach( ( expense ) => {\n        dataBudget.push( {\n            name: expense.name,\n            y: expense.totals.find( ( item ) => item.year === 2017 && item.type === 'BUDGET' ).amount,\n        } );\n        dataActual.push( {\n            name: expense.name,\n            y: expense.totals.find( ( item ) => item.year === 2017 && item.type === 'ACTUAL' ).amount,\n        } );\n    } );\n\n    return {\n        credits: {\n            enabled: false,\n        },\n        chart: {\n            type: 'column',\n            options3d: {\n                enabled: true,\n                alpha: 5,\n                beta: 5\n            }\n        },\n        title: {\n            text: 'Budget vs Actual 2017'\n        },\n        xAxis: {\n            type: 'category'\n        },\n        plotOptions: {},\n        series: [ {\n            name: 'Budget',\n            data: dataBudget\n        }, {\n            name: 'Actual',\n            data: dataActual\n        } ]\n    };\n};\n\nexport class HighCharts extends React.Component {\n    chart;\n\n    constructor( props ) {\n        super( props );\n\n        this.grabChart = this.grabChart.bind( this );\n        this.printChart = this.printChart.bind( this );\n    }\n\n\n    grabChart( chart ) {\n        this.chart = chart;\n    }\n\n    printChart() {\n        this.chart.exportChartLocal();\n    }\n\n    render() {\n        return (\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <h2>Highcharts</h2>\n                    <p>\n                        A non-D3 charting library, that is used with a paid license.\n                        Many config options allowing much control over style and display.\n                        Anything not in the config is not possible though.\n                        Allows usage of HTML and SVG in formatting of labels.\n                        Very visually appealing.\n                        Stock and Map style charts are extra cost.\n                        Plugins available.\n                        Allows Exporting to PDF, Print, PNG, JPG, and SVG.\n                        Has a cloud editor for non-technical users.\n                    </p>\n                    <button onClick={this.printChart}>Print</button>\n                </div>\n                <div className=\"col-4\">\n                    <HighchartsReact\n                        highcharts={Highcharts}\n                        options={pieChartHigh()}\n                        callback={this.grabChart}\n                    />\n                </div>\n                <div className=\"col-4\">\n                    <HighchartsReact\n                        highcharts={Highcharts}\n                        options={directCompareHigh()}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport C3Chart from 'react-c3js';\nimport 'c3/c3.css';\nimport budgetSummary from \"../budgetSummary\";\n\nconst pieChartC3 = () => {\n    const data = [];\n    const directExpenses = budgetSummary.expenses.filter( ( expense ) => expense.type === 'DIRECT' );\n\n    directExpenses.forEach( ( expense ) => {\n        data.push( [\n            expense.name,\n            expense.totals.find( ( item ) => item.year === 2017 && item.type === 'BUDGET' ).amount\n        ] );\n    } );\n\n    return {\n        columns: data,\n        type: 'pie',\n    };\n};\n\nexport const C3Charts = () => (\n    <div className=\"row\">\n        <div className=\"col-12\">\n            <h2>C3</h2>\n            <p>\n                A free wrapper of D3 with open access d3 code.\n                Very limited in options, require D3 for more less common choices.\n                API is not well documented and missing many needed examples.\n                No Stock and Map style charts.\n            </p>\n        </div>\n        <div className=\"col-4\">\n            <C3Chart\n                data={pieChartC3()}\n                pie={{\n                    label: {\n                        format: function ( value, ratio, id ) {\n                            return value;\n                        }\n                    }\n                }}\n            />\n        </div>\n    </div>\n);\n","import React, { Component } from 'react';\n\nimport { PlotlyCharts } from './PlotlyCharts';\nimport { HighCharts } from \"./HighCharts\";\nimport { C3Charts } from \"./C3Charts\";\n\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"mx-5 my-3\">\n                <PlotlyCharts/>\n                <HighCharts/>\n                <C3Charts/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}